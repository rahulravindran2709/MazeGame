/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/data/config.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,texture:{path:"./assets/textures/",imageFiles:[{name:"grass",image:"football_grass.png"},{name:"ball",image:"ball.png"},{name:"wall",image:"logo.png"}]},fog:{color:16777215,near:8e-4},camera:{fov:60,near:2,far:1e3,aspect:window.innerWidth/window.innerHeight,posX:1,posY:1,posZ:5},controls:{autoRotate:!1,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:10,maxDistance:6e3,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!1,color:4210752},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.5,distance:10,decay:3,x:1,y:1,z:1.3},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0},physics:{world:{gravity:{x:0,y:0,z:0}},ball:{mass:1,radius:.25,initialPosition:{x:1,y:1,z:.25}}}}},"./src/css/app.scss":(e,t,r)=>{"use strict";r.r(t)},"./src/js/app.ts":(e,t,r)=>{"use strict";r.r(t);var n=r("./src/js/utils/detector.ts"),o=r("./src/js/app/main.ts");r("./src/css/app.scss");!function(){if(n.default.webgl){var e=document.getElementById("appContainer");new o.default(e)}else n.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");const i=function(){function e(e){var t=this,r=e.domElement.width,i=e.domElement.height;this.threeCamera=new n.PerspectiveCamera(o.default.camera.fov,r/i,o.default.camera.near,o.default.camera.far),this.threeCamera.position.set(o.default.camera.posX,o.default.camera.posY,o.default.camera.posZ),this.updateSize(e),window.addEventListener("resize",(function(){return t.updateSize(e)}),!1)}return e.prototype.updateSize=function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()},e}()},"./src/js/app/components/controls.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});r("./src/js/utils/orbitControls.ts");var n=r("./src/js/data/config.js");const o=function(){function e(e,t){}return e.prototype.init=function(){this.threeControls.target.set(n.default.controls.target.x,n.default.controls.target.y,n.default.controls.target.z),this.threeControls.autoRotate=n.default.controls.autoRotate,this.threeControls.autoRotateSpeed=n.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=n.default.controls.rotateSpeed,this.threeControls.zoomSpeed=n.default.controls.zoomSpeed,this.threeControls.minDistance=n.default.controls.minDistance,this.threeControls.maxDistance=n.default.controls.maxDistance,this.threeControls.minPolarAngle=n.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=n.default.controls.maxPolarAngle,this.threeControls.enableDamping=n.default.controls.enableDamping,this.threeControls.enableZoom=n.default.controls.enableZoom,this.threeControls.dampingFactor=n.default.controls.dampingFactor},e}()},"./src/js/app/components/geometry.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/utils/bufferGeometryUtils.ts");const i=function(){function e(e,t){this.scene=e,this.geo=null,this.dimension=t}return e.prototype.makeSphere=function(e,t,r){void 0===t&&(t=32),void 0===r&&(r=32),this.geo=new n.SphereGeometry(e,t,r)},e.prototype.makePlane=function(e,t,r,o){void 0===r&&(r=1),void 0===o&&(o=1),this.geo=new n.PlaneGeometry(e,t,r,o)},e.prototype.makeBox=function(e,t,r,o,i,a){this.geo=new n.BoxGeometry(e,t,r,o,i,a)},e.prototype.makeBall=function(){return this.makeSphere(.25,32,16),this.geo},e.prototype.makeGround=function(){return this.makePlane(10*this.dimension,10*this.dimension,this.dimension,this.dimension),this.geo},e.prototype.makeWalls=function(e){for(var t=new n.Object3D,r=new n.Object3D,i=[],a=0;a<e.length;a++)for(var s=0;s<e.length;s++)if(!0===e[a][s]){var l=new n.BoxGeometry(1,1,1,1,1,1);r.position.x=a,r.position.y=s,r.position.z=0,r.add(t),t.updateWorldMatrix(!0,!1),l.applyMatrix4(t.matrixWorld),i.push(l)}return o.BufferGeometryUtils.mergeBufferGeometries(i)},e}()},"./src/js/app/components/light.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");const i=function(){function e(e){this.scene=e,this.init()}return e.prototype.init=function(){this.pointLight=new n.PointLight(o.default.pointLight.color,o.default.pointLight.intensity,o.default.pointLight.distance,o.default.pointLight.decay),this.pointLight.position.set(o.default.pointLight.x,o.default.pointLight.y,o.default.pointLight.z),this.pointLight.visible=o.default.pointLight.enabled,this.ambientLight=new n.AmbientLight(o.default.ambientLight.color),this.ambientLight.visible=o.default.ambientLight.enabled},e.prototype.place=function(e){switch(e){case"point":this.scene.add(this.pointLight);break;case"ambient":this.scene.add(this.ambientLight)}},e}()},"./src/js/app/components/material.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/three/build/three.module.js");const o=function(){function e(){}return e.prototype.makePhongMaterial=function(e){return new n.MeshPhongMaterial({map:e})},e}()},"./src/js/app/components/physics.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Physics:()=>i});var n=r("./node_modules/cannon-es/dist/cannon-es.js"),o=r("./src/js/data/config.js"),i=function(){function e(){this.force=500,this.dt=1/60,this.fixedTimeStep=1/60,this.maxSubSteps=3}return e.prototype.setupWorld=function(e){this.createZeroGravityWorld(),this.createFrictionSurfaces(),this.createGround(),this.createBall(),this.createWall(e)},e.prototype.createZeroGravityWorld=function(){var e=o.default.physics.world.gravity,t=e.x,r=e.y,i=e.z;this.world=new n.World({gravity:new n.Vec3(t,r,i),broadphase:new n.NaiveBroadphase})},e.prototype.createFrictionSurfaces=function(){this.ballMaterial=new n.Material("ballMaterial"),this.groundMaterial=new n.Material("groundMaterial"),this.wallMaterial=new n.Material("wallMaterial");var e=new n.ContactMaterial(this.groundMaterial,this.groundMaterial,{friction:1,restitution:.3,contactEquationStiffness:1e8,contactEquationRelaxation:3,frictionEquationStiffness:1e8});this.world.addContactMaterial(e);var t=new n.ContactMaterial(this.groundMaterial,this.ballMaterial,{friction:1,restitution:.3,contactEquationStiffness:1e8,contactEquationRelaxation:3});this.world.addContactMaterial(t);var r=new n.ContactMaterial(this.ballMaterial,this.wallMaterial,{friction:.6,restitution:.7,contactEquationStiffness:1e8,contactEquationRelaxation:3});this.world.addContactMaterial(r)},e.prototype.createBall=function(){var e=o.default.physics.ball,t=e.initialPosition,r=e.mass,i=e.radius;this.ball=new n.Body({material:this.ballMaterial,mass:r,collisionFilterGroup:this.GROUP1,collisionFilterMask:this.GROUP2,linearDamping:.5,angularDamping:.5,shape:new n.Sphere(i),type:n.BODY_TYPES.DYNAMIC});var a=t.x,s=void 0===a?0:a,l=t.y,u=void 0===l?0:l,c=t.z,d=void 0===c?0:c;this.ball.position.set(s,u,d),this.world.addBody(this.ball),this.ball.addEventListener("collide",(function(e){console.log("The sphere just collided with the ground!"),console.log("Collided with body:",e.body)}))},e.prototype.createGround=function(){var e=new n.Plane,t=new n.Body({mass:0,material:this.groundMaterial});t.addShape(e),t.position.setZero(),this.world.addBody(t)},e.prototype.createWall=function(e){for(var t=0;t<e.length;t++)for(var r=0;r<e.length;r++)if(!0===e[t][r]){var o=new n.Body({type:n.BODY_TYPES.STATIC,material:this.wallMaterial,shape:new n.Box(new n.Vec3(.5,.5,.5)),collisionFilterGroup:this.GROUP2,collisionFilterMask:this.GROUP1});o.position.x=t,o.position.y=r,o.position.z=0,this.world.addBody(o)}},e.prototype.moveBall=function(e){var t,r=new n.Vec3(0,0,.25);switch(e){case"left":t=new n.Vec3(-1,0,0);break;case"right":t=new n.Vec3(1,0,0);break;case"up":t=new n.Vec3(0,1,0);break;case"down":t=new n.Vec3(0,-1,0)}this.ball.applyImpulse(t,r)},e.prototype.updatePhysics=function(e){this.world.step(this.fixedTimeStep,e,this.maxSubSteps)},e}()},"./src/js/app/components/renderer.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");const i=function(){function e(e,t){var r=this;this.scene=e,this.container=t,this.threeRenderer=new n.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(e.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),t.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=n.PCFSoftShadowMap,o.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return r.updateSize()}),!1),window.addEventListener("resize",(function(){return r.updateSize()}),!1)}return e.prototype.updateSize=function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)},e.prototype.render=function(e,t){this.threeRenderer.render(e,t)},e}()},"./src/js/app/main.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var n,o=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),i=r("./node_modules/three/build/three.module.js"),a=r("./src/js/data/config.js"),s=r("./src/js/app/components/camera.ts"),l=r("./src/js/app/components/controls.ts"),u=r("./src/js/app/components/geometry.ts"),c=r("./src/js/app/components/light.ts"),d=r("./src/js/app/components/material.ts"),h=r("./src/js/app/components/physics.ts"),m=r("./src/js/app/components/renderer.ts"),p=r("./src/js/app/managers/interaction.ts"),f=r("./src/js/app/model/texture.ts");const g=function(){function e(e){var t=this;this.path=[],this.container=e,this.clock=new i.Clock,this.mazeDimension=11,this.scene=new i.Scene,this.scene.fog=new i.FogExp2(a.default.fog.color,a.default.fog.near),this.material=new d.default,this.geometry=new u.default(this.scene,this.mazeDimension),window.devicePixelRatio&&(a.default.dpr=window.devicePixelRatio),this.renderer=new m.default(this.scene,e),this.camera=new s.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,e),this.lights=new c.default(this.scene),this.texture=new f.default,this.physics=new h.Physics,this.maze=this.generateSquareMaze(this.mazeDimension),this.maze[this.mazeDimension-1][this.mazeDimension-2]=!1,this.setupPhysics(),this.texture.load().then((function(){t.setupRenderWorld(),new p.default(t.renderer.threeRenderer,t.scene,t.camera.threeCamera,t.controls.threeControls,t.moveBall.bind(t))})),this.gameState="initialize",this.render(Date.now())}return e.prototype.moveBall=function(e){this.physics.moveBall(e)},e.prototype.setupRenderWorld=function(){this.scene.add(this.camera.threeCamera),this.lights.place("ambient"),this.lights.place("point");var e=this.geometry.makeBall(),t=this.geometry.makeGround(),r=this.geometry.makeWalls(this.maze),n=this.texture.textures,o=n.grass,a=n.ball,s=n.wall,l=this.material.makePhongMaterial(a);this.ballMesh=new i.Mesh(e,l),this.ballMesh.position.set(1,1,.25),this.scene.add(this.ballMesh);var u=this.material.makePhongMaterial(s),c=new i.Mesh(r,u);c.position.z=.5,this.scene.add(c),o.wrapS=i.RepeatWrapping,o.wrapT=i.RepeatWrapping,o.repeat.set(5*this.mazeDimension,5*this.mazeDimension);var d=this.material.makePhongMaterial(o),h=new i.Mesh(t,d);h.position.set((this.mazeDimension-1)/2,(this.mazeDimension-1)/2,0),h.rotation.set(0,0,0),this.scene.add(h)},e.prototype.updateRenderWorld=function(){this.ballMesh.position.copy(this.physics.ball.position),this.ballMesh.quaternion.copy(this.physics.ball.quaternion),this.lights.pointLight.position.copy(new i.Vector3(this.physics.ball.position.x,this.physics.ball.position.y,a.default.pointLight.z)),this.camera.threeCamera.position.x+=.1*(this.ballMesh.position.x-this.camera.threeCamera.position.x),this.camera.threeCamera.position.y+=.1*(this.ballMesh.position.y-this.camera.threeCamera.position.y)},e.prototype.setupPhysics=function(){this.physics.setupWorld(this.maze)},e.prototype.generateSquareMaze=function(e){for(var t=new Array(e),r=0;r<e;r++){t[r]=new Array(e);for(var o=0;o<e;o++)t[r][o]=!0}return t=function t(r,o,i){for(r[o][i]=!1;;){if(n=[],o>1&&1==r[o-2][i]&&n.push([-1,0]),o<e-2&&1==r[o+2][i]&&n.push([1,0]),i>1&&1==r[o][i-2]&&n.push([0,-1]),i<e-2&&1==r[o][i+2]&&n.push([0,1]),0==n.length)return r;var a=n[Math.floor(Math.random()*n.length)];r[o+a[0]][i+a[1]]=!1,r=t(r,o+2*a[0],i+2*a[1])}}(t,1,1)},e.prototype.render=function(e){switch(o.default.update(),this.gameState){case"initialize":this.gameState="fade in",this.lights.pointLight.intensity=0;case"fade in":var t=this.lights.pointLight.intensity;this.lights.pointLight.intensity+=.1*(1-t),this.renderer.render(this.scene,this.camera.threeCamera),Math.abs(t-1)<.05&&(this.lights.pointLight.intensity=1,this.gameState="play");break;case"play":this.physics.updatePhysics(e),this.updateRenderWorld();var r=Math.floor(this.ballMesh.position.x+.5),n=Math.floor(this.ballMesh.position.y+.5);if(0===this.path.length)this.path.push([r,n]);else if(this.path[this.path.length-1]){var i=this.path[this.path.length-1],a=i[0],s=i[1];a===r&&s===n||this.path.push([r,n])}r==this.mazeDimension&&n==this.mazeDimension-2&&(document.getElementById("maze_solution").value=JSON.stringify(this.path),this.gameState="fade out",setTimeout((function(){document.forms[0].submit()}),300)),this.renderer.render(this.scene,this.camera.threeCamera);break;case"fade out":this.lights.pointLight.intensity+=.1*(0-this.lights.pointLight.intensity),this.renderer.render(this.scene,this.camera.threeCamera),Math.abs(this.lights.pointLight.intensity-0)<.1&&(this.lights.pointLight.intensity=0,this.renderer.render(this.scene,this.camera.threeCamera))}requestAnimationFrame(this.render.bind(this))},e}()},"./src/js/app/managers/interaction.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./src/js/data/config.js"),o=r("./src/js/utils/helpers.ts"),i=r("./src/js/utils/keyboard.ts");const a=function(){function e(e,t,r,n,a){var s=this;this.renderer=e,this.scene=t,this.camera=r,this.controls=n,this.timeout=null,this.keyboard=new i.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return o.default.throttle((function(){return s.onMouseMove(e)}),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||(s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed"),s.keyboard.eventMatches(e,"left")&&(console.log("Left pressed"),a("left")),s.keyboard.eventMatches(e,"right")&&(console.log("Right pressed"),a("right")),s.keyboard.eventMatches(e,"down")&&(console.log("Down pressed"),a("down")),s.keyboard.eventMatches(e,"up")&&(console.log("Up pressed"),a("up")))}))}return e.prototype.onMouseOver=function(e){e.preventDefault(),n.default.isMouseOver=!0},e.prototype.onMouseLeave=function(e){e.preventDefault(),n.default.isMouseOver=!1},e.prototype.onMouseMove=function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){n.default.isMouseMoving=!1}),200),n.default.isMouseMoving=!0},e}()},"./src/js/app/model/texture.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./node_modules/es6-promise/dist/es6-promise.js"),i=r("./src/js/utils/helpers.ts"),a=r("./src/js/data/config.js");const s=function(){function e(){this.textures={}}return e.prototype.load=function(){var e=this,t=new n.TextureLoader,r=a.default.maxAnisotropy,s=a.default.texture.imageFiles,l=[];return t.setPath(a.default.texture.path),s.forEach((function(e){l.push(new o.Promise((function(o,a){t.load(e.image,(function(t){t.anisotropy=r;var i={};i[e.name]=t,i[e.name]instanceof n.Texture&&o(i)}),i.default.logProgress(),(function(t){return a(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),o.Promise.all(l).then((function(t){for(var r=0;r<t.length;r++)e.textures[Object.keys(t[r])[0]]=t[r][Object.keys(t[r])[0]]}),(function(e){return console.log(e)}))},e}()},"./src/js/utils/bufferGeometryUtils.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BufferGeometryUtils:()=>o});var n=r("./node_modules/THREE/build/three.module.js"),o=function(){function e(){}return e.computeTangents=function(e){e.computeTangents(),console.warn("THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.")},e.mergeBufferGeometries=function(e,t){void 0===t&&(t=!1);for(var r=null!==e[0].index,o=new Set(Object.keys(e[0].attributes)),i=new Set(Object.keys(e[0].morphAttributes)),a={},s={},l=e[0].morphTargetsRelative,u=new n.BufferGeometry,c=0,d=0;d<e.length;++d){var h=e[d],m=0;if(r!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var p in h.attributes){if(!o.has(p))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+p+'" attribute exists among all geometries, or in none of them.'),null;void 0===a[p]&&(a[p]=[]),a[p].push(h.attributes[p]),m++}if(m!==o.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var f in h.morphAttributes){if(!i.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[f]&&(s[f]=[]),s[f].push(h.morphAttributes[f])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(h.userData),t){var g=void 0;if(r)g=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;g=h.attributes.position.count}u.addGroup(c,g,d),c+=g}}if(r){var b=0,y=[];for(d=0;d<e.length;++d){for(var v=e[d].index,w=0;w<v.count;++w)y.push(v.getX(w)+b);b+=e[d].attributes.position.count}u.setIndex(y)}for(var E in a){var M=this.mergeBufferAttributes(a[E]);if(!M)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+E+" attribute."),null;u.setAttribute(E,M)}for(var A in s){var T=s[A][0].length;if(0===T)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[A]=[];for(d=0;d<T;++d){var x=[];for(w=0;w<s[A].length;++w)x.push(s[A][w][d]);var j=this.mergeBufferAttributes(x);if(!j)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+A+" morphAttribute."),null;u.morphAttributes[A].push(j)}}return u},e.mergeBufferAttributes=function(e){for(var t,r,o,i=0,a=0;a<e.length;++a){var s=e[a];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=s.itemSize),r!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===o&&(o=s.normalized),o!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;i+=s.array.length}var l=new t(i),u=0;for(a=0;a<e.length;++a)l.set(e[a].array,u),u+=e[a].array.length;return new n.BufferAttribute(l,r,o)},e.interleaveAttributes=function(e){for(var t,r=0,o=0,i=0,a=e.length;i<a;++i){var s=e[i];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=s.array.length,o+=s.itemSize}var l=new n.InterleavedBuffer(new t(r),o),u=0,c=[],d=["getX","getY","getZ","getW"],h=["setX","setY","setZ","setW"],m=0;for(a=e.length;m<a;m++){var p=(s=e[m]).itemSize,f=s.count,g=new n.InterleavedBufferAttribute(l,p,u,s.normalized);c.push(g),u+=p;for(var b=0;b<f;b++)for(var y=0;y<p;y++)g[h[y]](b,s[d[y]](b))}return c},e.estimateBytesUsed=function(e){var t=0;for(var r in e.attributes){var n=e.getAttribute(r);t+=n.count*n.itemSize*n.array.BYTES_PER_ELEMENT}var o=e.getIndex();return t+=o?o.count*o.itemSize*o.array.BYTES_PER_ELEMENT:0},e.mergeVertices=function(e,t){void 0===t&&(t=1e-4),t=Math.max(t,Number.EPSILON);for(var r={},o=e.getIndex(),i=e.getAttribute("position"),a=o?o.count:i.count,s=0,l=Object.keys(e.attributes),u={},c={},d=[],h=["getX","getY","getZ","getW"],m=0,p=l.length;m<p;m++){var f=l[m];u[f]=[],(j=e.morphAttributes[f])&&(c[f]=new Array(j.length).fill().map((function(){return[]})))}var g=Math.log10(1/t),b=Math.pow(10,g);for(m=0;m<a;m++){var y=o?o.getX(m):m,v="",w=0;for(p=l.length;w<p;w++)for(var E=l[w],M=(x=e.getAttribute(E)).itemSize,A=0;A<M;A++)v+=~~(x[h[A]](y)*b)+",";if(v in r)d.push(r[v]);else{for(w=0,p=l.length;w<p;w++){var T=l[w],x=e.getAttribute(T),j=e.morphAttributes[T],L=(M=x.itemSize,u[T]),O=c[T];for(A=0;A<M;A++){var S=h[A];if(L.push(x[S](y)),j)for(var C=0,P=j.length;C<P;C++)O[C].push(j[C][S](y))}}r[v]=s,d.push(s),s++}}var k=e.clone();for(m=0,p=l.length;m<p;m++){var R=l[m],B=e.getAttribute(R),z=new B.array.constructor(u[R]);x=new n.BufferAttribute(z,B.itemSize,B.normalized);if(k.setAttribute(R,x),R in c)for(w=0;w<c[R].length;w++){var D=e.morphAttributes[R][w],G=new D.array.constructor(c[R][w]),U=new n.BufferAttribute(G,D.itemSize,D.normalized);k.morphAttributes[R][w]=U}}return k.setIndex(d),k},e.toTrianglesDrawMode=function(e,t){if(t===n.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===n.TriangleFanDrawMode||t===n.TriangleStripDrawMode){var r=e.getIndex();if(null===r){var o=[],i=e.getAttribute("position");if(void 0===i)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var a=0;a<i.count;a++)o.push(a);e.setIndex(o),r=e.getIndex()}var s=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(a=1;a<=s;a++)l.push(r.getX(0)),l.push(r.getX(a)),l.push(r.getX(a+1));else for(a=0;a<s;a++)a%2==0?(l.push(r.getX(a)),l.push(r.getX(a+1)),l.push(r.getX(a+2))):(l.push(r.getX(a+2)),l.push(r.getX(a+1)),l.push(r.getX(a)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e},e.computeMorphedAttributes=function(e){if(!0!==e.geometry.isBufferGeometry)return console.error("THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry."),null;var t=new n.Vector3,r=new n.Vector3,o=new n.Vector3,i=new n.Vector3,a=new n.Vector3,s=new n.Vector3,l=new n.Vector3,u=new n.Vector3,c=new n.Vector3;function d(e,n,d,h,m,p,f,g,b){t.fromBufferAttribute(d,p),r.fromBufferAttribute(d,f),o.fromBufferAttribute(d,g);var y=e.morphTargetInfluences;if(n.morphTargets&&h&&y){l.set(0,0,0),u.set(0,0,0),c.set(0,0,0);for(var v=0,w=h.length;v<w;v++){var E=y[v],M=h[v];0!==E&&(i.fromBufferAttribute(M,p),a.fromBufferAttribute(M,f),s.fromBufferAttribute(M,g),m?(l.addScaledVector(i,E),u.addScaledVector(a,E),c.addScaledVector(s,E)):(l.addScaledVector(i.sub(t),E),u.addScaledVector(a.sub(r),E),c.addScaledVector(s.sub(o),E)))}t.add(l),r.add(u),o.add(c)}e.isSkinnedMesh&&(e.boneTransform(p,t),e.boneTransform(f,r),e.boneTransform(g,o)),b[3*p+0]=t.x,b[3*p+1]=t.y,b[3*p+2]=t.z,b[3*f+0]=r.x,b[3*f+1]=r.y,b[3*f+2]=r.z,b[3*g+0]=o.x,b[3*g+1]=o.y,b[3*g+2]=o.z}var h,m,p,f,g,b,y,v,w,E=e.geometry,M=e.material,A=E.index,T=E.attributes.position,x=E.morphAttributes.position,j=E.morphTargetsRelative,L=E.attributes.normal,O=E.morphAttributes.position,S=E.groups,C=E.drawRange,P=new Float32Array(T.count*T.itemSize),k=new Float32Array(L.count*L.itemSize);if(null!==A)if(Array.isArray(M))for(f=0,b=S.length;f<b;f++)for(w=M[(v=S[f]).materialIndex],g=Math.max(v.start,C.start),y=Math.min(v.start+v.count,C.start+C.count);g<y;g+=3)d(e,w,T,x,j,h=A.getX(g),m=A.getX(g+1),p=A.getX(g+2),P),d(e,w,L,O,j,h,m,p,k);else for(f=Math.max(0,C.start),b=Math.min(A.count,C.start+C.count);f<b;f+=3)d(e,M,T,x,j,h=A.getX(f),m=A.getX(f+1),p=A.getX(f+2),P),d(e,M,L,O,j,h,m,p,k);else if(void 0!==T)if(Array.isArray(M))for(f=0,b=S.length;f<b;f++)for(w=M[(v=S[f]).materialIndex],g=Math.max(v.start,C.start),y=Math.min(v.start+v.count,C.start+C.count);g<y;g+=3)d(e,w,T,x,j,h=g,m=g+1,p=g+2,P),d(e,w,L,O,j,h,m,p,k);else for(f=Math.max(0,C.start),b=Math.min(T.count,C.start+C.count);f<b;f+=3)d(e,M,T,x,j,h=f,m=f+1,p=f+2,P),d(e,M,L,O,j,h,m,p,k);return{positionAttribute:T,normalAttribute:L,morphedPositionAttribute:new n.Float32BufferAttribute(P,3),morphedNormalAttribute:new n.Float32BufferAttribute(k,3)}},e}()},"./src/js/utils/detector.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,r,n;t=void 0!==(null==e?void 0:e.parentElement)?e.parentElement:document.body,r=void 0!==(null==e?void 0:e.id)?e.id:"oldie",(n=this.getWebGLErrorMessage()).id=r,t.appendChild(n)}}},"./src/js/utils/helpers.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/three/build/three.module.js");const o=function(){function e(){}return e.throttle=function(e,t,r){var n,o;return t||(t=250),function(){var i=r||this,a=+new Date,s=arguments;n&&a<n+t?(clearTimeout(o),o=setTimeout((function(){n=a,e.apply(i,s)}),t)):(n=a,e.apply(i,s))}},e.logProgress=function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t)+"% downloaded")}}},e.logError=function(){return function(e){console.error(e)}},e.handleColorChange=function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(parseInt(t,12))}},e.update=function(e){this.needsUpdate(e.material,e.geometry)},e.needsUpdate=function(e,t){return function(){e instanceof n.Material&&(e.side=+e.side,e.needsUpdate=!0),t.attributes.position.needsUpdate=!0,t.attributes.normals.needsUpdate=!0,t.attributes.colors.needsUpdate=!0}},e.updateTexture=function(e,t,r){return function(n){e[t]=r[n],e.needsUpdate=!0}},e}()},"./src/js/utils/keyboard.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ALIAS:()=>n,default:()=>o});var n={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27};const o=function(){function e(e){var t=this;this.domElement=e||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return t.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return t.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return t.onBlur}),!1)}return e.prototype.destroy=function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)},e.prototype.onBlur=function(){for(var e in this.keyCodes)this.keyCodes[e]=!1},e.prototype.onKeyChange=function(e){console;var t=e.keyCode;this.keyCodes[t]="keydown"===e.type},e.prototype.pressed=function(e){for(var t=e.split("+"),r=0;r<t.length;r++){var o=t[r];if(!(-1!=Object.keys(n).indexOf(o)?this.keyCodes[n[o]]:this.keyCodes[o.toUpperCase().charCodeAt(0)]))return!1}return!0},e.prototype.eventMatches=function(e,t){for(var r=n,o=Object.keys(r),i=-1!=t.indexOf("+")?t.split("+"):[t],a=0;a<i.length;a++){var s=i[a],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==o.indexOf(s)?l=e.keyCode===r[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0},e}()},"./src/js/utils/orbitControls.ts":(e,t,r)=>{"use strict";r.r(t);var n,o,i,a,s,l,u=r("./node_modules/three/build/three.module.js"),c=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});o={type:"change"},i={type:"start"},a={type:"end"},s=function(e){function t(t,r){var n,s,l,c,d,h,m=e.call(this)||this;void 0===r&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),r===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),m.object=t,m.domElement=r,m.enabled=!0,m.target=new u.Vector3,m.minDistance=0,m.maxDistance=1/0,m.minZoom=0,m.maxZoom=1/0,m.minPolarAngle=0,m.maxPolarAngle=Math.PI,m.minAzimuthAngle=-1/0,m.maxAzimuthAngle=1/0,m.enableDamping=!1,m.dampingFactor=.05,m.enableZoom=!0,m.zoomSpeed=1,m.enableRotate=!0,m.rotateSpeed=1,m.enablePan=!0,m.panSpeed=1,m.screenSpacePanning=!0,m.keyPanSpeed=7,m.autoRotate=!1,m.autoRotateSpeed=2,m.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},m.mouseButtons={LEFT:u.MOUSE.ROTATE,MIDDLE:u.MOUSE.DOLLY,RIGHT:u.MOUSE.PAN},m.touches={ONE:u.TOUCH.ROTATE,TWO:u.TOUCH.DOLLY_PAN},m.target0=m.target.clone(),m.position0=m.object.position.clone(),m.zoom0=m.object.zoom,m._domElementKeyEvents=null,m.getPolarAngle=function(){return y.phi},m.getAzimuthalAngle=function(){return y.theta},m.listenToKeyEvents=function(e){e.addEventListener("keydown",$),this._domElementKeyEvents=e},m.saveState=function(){p.target0.copy(p.target),p.position0.copy(p.object.position),p.zoom0=p.object.zoom},m.reset=function(){p.target.copy(p.target0),p.object.position.copy(p.position0),p.object.zoom=p.zoom0,p.object.updateProjectionMatrix(),p.dispatchEvent(o),p.update(),g=f.NONE},m.update=(n=new u.Vector3,s=(new u.Quaternion).setFromUnitVectors(t.up,new u.Vector3(0,1,0)),l=s.clone().invert(),c=new u.Vector3,d=new u.Quaternion,h=2*Math.PI,function(){var e=p.object.position;n.copy(e).sub(p.target),n.applyQuaternion(s),y.setFromVector3(n),p.autoRotate&&g===f.NONE&&R(2*Math.PI/60/60*p.autoRotateSpeed),p.enableDamping?(y.theta+=v.theta*p.dampingFactor,y.phi+=v.phi*p.dampingFactor):(y.theta+=v.theta,y.phi+=v.phi);var t=p.minAzimuthAngle,r=p.maxAzimuthAngle;return isFinite(t)&&isFinite(r)&&(t<-Math.PI?t+=h:t>Math.PI&&(t-=h),r<-Math.PI?r+=h:r>Math.PI&&(r-=h),y.theta=t<=r?Math.max(t,Math.min(r,y.theta)):y.theta>(t+r)/2?Math.max(t,y.theta):Math.min(r,y.theta)),y.phi=Math.max(p.minPolarAngle,Math.min(p.maxPolarAngle,y.phi)),y.makeSafe(),y.radius*=w,y.radius=Math.max(p.minDistance,Math.min(p.maxDistance,y.radius)),!0===p.enableDamping?p.target.addScaledVector(E,p.dampingFactor):p.target.add(E),n.setFromSpherical(y),n.applyQuaternion(l),e.copy(p.target).add(n),p.object.lookAt(p.target),!0===p.enableDamping?(v.theta*=1-p.dampingFactor,v.phi*=1-p.dampingFactor,E.multiplyScalar(1-p.dampingFactor)):(v.set(0,0,0),E.set(0,0,0)),w=1,!!(M||c.distanceToSquared(p.object.position)>b||8*(1-d.dot(p.object.quaternion))>b)&&(p.dispatchEvent(o),c.copy(p.object.position),d.copy(p.object.quaternion),M=!1,!0)}),m.dispose=function(){p.domElement.removeEventListener("contextmenu",ne),p.domElement.removeEventListener("pointerdown",K),p.domElement.removeEventListener("wheel",J),p.domElement.removeEventListener("touchstart",ee),p.domElement.removeEventListener("touchend",re),p.domElement.removeEventListener("touchmove",te),p.domElement.ownerDocument.removeEventListener("pointermove",q),p.domElement.ownerDocument.removeEventListener("pointerup",Q),null!==p._domElementKeyEvents&&p._domElementKeyEvents.removeEventListener("keydown",$)};var p=m,f={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},g=f.NONE,b=1e-6,y=new u.Spherical,v=new u.Spherical,w=1,E=new u.Vector3,M=!1,A=new u.Vector2,T=new u.Vector2,x=new u.Vector2,j=new u.Vector2,L=new u.Vector2,O=new u.Vector2,S=new u.Vector2,C=new u.Vector2,P=new u.Vector2;function k(){return Math.pow(.95,p.zoomSpeed)}function R(e){v.theta-=e}function B(e){v.phi-=e}var z,D=(z=new u.Vector3,function(e,t){z.setFromMatrixColumn(t,0),z.multiplyScalar(-e),E.add(z)}),G=function(){var e=new u.Vector3;return function(t,r){!0===p.screenSpacePanning?e.setFromMatrixColumn(r,1):(e.setFromMatrixColumn(r,0),e.crossVectors(p.object.up,e)),e.multiplyScalar(t),E.add(e)}}(),U=function(){var e=new u.Vector3;return function(t,r){var n=p.domElement;if(p.object.isPerspectiveCamera){var o=p.object.position;e.copy(o).sub(p.target);var i=e.length();i*=Math.tan(p.object.fov/2*Math.PI/180),D(2*t*i/n.clientHeight,p.object.matrix),G(2*r*i/n.clientHeight,p.object.matrix)}else p.object.isOrthographicCamera?(D(t*(p.object.right-p.object.left)/p.object.zoom/n.clientWidth,p.object.matrix),G(r*(p.object.top-p.object.bottom)/p.object.zoom/n.clientHeight,p.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),p.enablePan=!1)}}();function _(e){p.object.isPerspectiveCamera?w/=e:p.object.isOrthographicCamera?(p.object.zoom=Math.max(p.minZoom,Math.min(p.maxZoom,p.object.zoom*e)),p.object.updateProjectionMatrix(),M=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),p.enableZoom=!1)}function N(e){p.object.isPerspectiveCamera?w*=e:p.object.isOrthographicCamera?(p.object.zoom=Math.max(p.minZoom,Math.min(p.maxZoom,p.object.zoom/e)),p.object.updateProjectionMatrix(),M=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),p.enableZoom=!1)}function H(e){A.set(e.clientX,e.clientY)}function Y(e){j.set(e.clientX,e.clientY)}function I(e){if(1==e.touches.length)A.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),r=.5*(e.touches[0].pageY+e.touches[1].pageY);A.set(t,r)}}function V(e){if(1==e.touches.length)j.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),r=.5*(e.touches[0].pageY+e.touches[1].pageY);j.set(t,r)}}function F(e){var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,n=Math.sqrt(t*t+r*r);S.set(0,n)}function X(e){if(1==e.touches.length)T.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),r=.5*(e.touches[0].pageY+e.touches[1].pageY);T.set(t,r)}x.subVectors(T,A).multiplyScalar(p.rotateSpeed);var n=p.domElement;R(2*Math.PI*x.x/n.clientHeight),B(2*Math.PI*x.y/n.clientHeight),A.copy(T)}function W(e){if(1==e.touches.length)L.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),r=.5*(e.touches[0].pageY+e.touches[1].pageY);L.set(t,r)}O.subVectors(L,j).multiplyScalar(p.panSpeed),U(O.x,O.y),j.copy(L)}function Z(e){var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,n=Math.sqrt(t*t+r*r);C.set(0,n),P.set(0,Math.pow(C.y/S.y,p.zoomSpeed)),_(P.y),S.copy(C)}function K(e){if(!1!==p.enabled)switch(e.pointerType){case"mouse":case"pen":!function(e){var t;switch(e.preventDefault(),p.domElement.focus?p.domElement.focus():window.focus(),e.button){case 0:t=p.mouseButtons.LEFT;break;case 1:t=p.mouseButtons.MIDDLE;break;case 2:t=p.mouseButtons.RIGHT;break;default:t=-1}switch(t){case u.MOUSE.DOLLY:if(!1===p.enableZoom)return;!function(e){S.set(e.clientX,e.clientY)}(e),g=f.DOLLY;break;case u.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===p.enablePan)return;Y(e),g=f.PAN}else{if(!1===p.enableRotate)return;H(e),g=f.ROTATE}break;case u.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===p.enableRotate)return;H(e),g=f.ROTATE}else{if(!1===p.enablePan)return;Y(e),g=f.PAN}break;default:g=f.NONE}g!==f.NONE&&(p.domElement.ownerDocument.addEventListener("pointermove",q),p.domElement.ownerDocument.addEventListener("pointerup",Q),p.dispatchEvent(i))}(e)}}function q(e){if(!1!==p.enabled)switch(e.pointerType){case"mouse":case"pen":!function(e){if(!1!==p.enabled)switch(e.preventDefault(),g){case f.ROTATE:if(!1===p.enableRotate)return;!function(e){T.set(e.clientX,e.clientY),x.subVectors(T,A).multiplyScalar(p.rotateSpeed);var t=p.domElement;R(2*Math.PI*x.x/t.clientHeight),B(2*Math.PI*x.y/t.clientHeight),A.copy(T),p.update()}(e);break;case f.DOLLY:if(!1===p.enableZoom)return;!function(e){C.set(e.clientX,e.clientY),P.subVectors(C,S),P.y>0?_(k()):P.y<0&&N(k()),S.copy(C),p.update()}(e);break;case f.PAN:if(!1===p.enablePan)return;!function(e){L.set(e.clientX,e.clientY),O.subVectors(L,j).multiplyScalar(p.panSpeed),U(O.x,O.y),j.copy(L),p.update()}(e)}}(e)}}function Q(e){switch(e.pointerType){case"mouse":case"pen":p.domElement.ownerDocument.removeEventListener("pointermove",q),p.domElement.ownerDocument.removeEventListener("pointerup",Q),!1!==p.enabled&&(p.dispatchEvent(a),g=f.NONE)}}function J(e){!1===p.enabled||!1===p.enableZoom||g!==f.NONE&&g!==f.ROTATE||(e.preventDefault(),p.dispatchEvent(i),function(e){e.deltaY<0?N(k()):e.deltaY>0&&_(k()),p.update()}(e),p.dispatchEvent(a))}function $(e){!1!==p.enabled&&!1!==p.enablePan&&function(e){var t=!1;switch(e.code){case p.keys.UP:U(0,p.keyPanSpeed),t=!0;break;case p.keys.BOTTOM:U(0,-p.keyPanSpeed),t=!0;break;case p.keys.LEFT:U(p.keyPanSpeed,0),t=!0;break;case p.keys.RIGHT:U(-p.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),p.update())}(e)}function ee(e){if(!1!==p.enabled){switch(e.preventDefault(),e.touches.length){case 1:switch(p.touches.ONE){case u.TOUCH.ROTATE:if(!1===p.enableRotate)return;I(e),g=f.TOUCH_ROTATE;break;case u.TOUCH.PAN:if(!1===p.enablePan)return;V(e),g=f.TOUCH_PAN;break;default:g=f.NONE}break;case 2:switch(p.touches.TWO){case u.TOUCH.DOLLY_PAN:if(!1===p.enableZoom&&!1===p.enablePan)return;!function(e){p.enableZoom&&F(e),p.enablePan&&V(e)}(e),g=f.TOUCH_DOLLY_PAN;break;case u.TOUCH.DOLLY_ROTATE:if(!1===p.enableZoom&&!1===p.enableRotate)return;!function(e){p.enableZoom&&F(e),p.enableRotate&&I(e)}(e),g=f.TOUCH_DOLLY_ROTATE;break;default:g=f.NONE}break;default:g=f.NONE}g!==f.NONE&&p.dispatchEvent(i)}}function te(e){if(!1!==p.enabled)switch(e.preventDefault(),g){case f.TOUCH_ROTATE:if(!1===p.enableRotate)return;X(e),p.update();break;case f.TOUCH_PAN:if(!1===p.enablePan)return;W(e),p.update();break;case f.TOUCH_DOLLY_PAN:if(!1===p.enableZoom&&!1===p.enablePan)return;!function(e){p.enableZoom&&Z(e),p.enablePan&&W(e)}(e),p.update();break;case f.TOUCH_DOLLY_ROTATE:if(!1===p.enableZoom&&!1===p.enableRotate)return;!function(e){p.enableZoom&&Z(e),p.enableRotate&&X(e)}(e),p.update();break;default:g=f.NONE}}function re(e){!1!==p.enabled&&(p.dispatchEvent(a),g=f.NONE)}function ne(e){!1!==p.enabled&&e.preventDefault()}return p.domElement.addEventListener("contextmenu",ne),p.domElement.addEventListener("pointerdown",K),p.domElement.addEventListener("wheel",J,{passive:!1}),p.domElement.addEventListener("touchstart",ee,{passive:!1}),p.domElement.addEventListener("touchend",re),p.domElement.addEventListener("touchmove",te,{passive:!1}),m.update(),m}return c(t,e),t}(u.EventDispatcher),l=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.screenSpacePanning=!1,n.mouseButtons.LEFT=u.MOUSE.PAN,n.mouseButtons.RIGHT=u.MOUSE.ROTATE,n.touches.ONE=u.TOUCH.PAN,n.touches.TWO=u.TOUCH.DOLLY_ROTATE,n}return c(t,e),t}(s),u.MapControls=l,u.OrbitControls=s}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.ts",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,