/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/data/config.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,texture:{path:"./assets/textures/",imageFiles:[{name:"grass",image:"football_grass.png"},{name:"ball",image:"ball.png"},{name:"wall",image:"logo.png"}]},fog:{color:16777215,near:8e-4},camera:{fov:60,near:2,far:1e3,aspect:window.innerWidth/window.innerHeight,posX:1,posY:1,posZ:5},controls:{autoRotate:!1,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:10,maxDistance:6e3,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!1,color:4210752},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.5,distance:10,decay:3,x:1,y:1,z:1.3},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0},physics:{world:{gravity:{x:0,y:0,z:0}},ball:{mass:1,radius:.25,initialPosition:{x:1,y:1,z:.25}}}}},"./src/css/app.scss":(e,t,n)=>{"use strict";n.r(t)},"./src/js/app.ts":(e,t,n)=>{"use strict";n.r(t);var r=n("./src/js/utils/detector.ts"),o=n("./src/js/app/main.ts");n("./src/css/app.scss");!function(){if(r.default.webgl){var e=document.getElementById("appContainer");new o.default(e)}else r.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),o=n("./src/js/data/config.js");const i=function(){function e(e){var t=this,n=e.domElement.width,i=e.domElement.height;this.threeCamera=new r.PerspectiveCamera(o.default.camera.fov,n/i,o.default.camera.near,o.default.camera.far),this.threeCamera.position.set(o.default.camera.posX,o.default.camera.posY,o.default.camera.posZ),this.updateSize(e),window.addEventListener("resize",(function(){return t.updateSize(e)}),!1)}return e.prototype.updateSize=function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()},e}()},"./src/js/app/components/controls.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});n("./src/js/utils/orbitControls.ts");var r=n("./src/js/data/config.js");const o=function(){function e(e,t){}return e.prototype.init=function(){this.threeControls.target.set(r.default.controls.target.x,r.default.controls.target.y,r.default.controls.target.z),this.threeControls.autoRotate=r.default.controls.autoRotate,this.threeControls.autoRotateSpeed=r.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=r.default.controls.rotateSpeed,this.threeControls.zoomSpeed=r.default.controls.zoomSpeed,this.threeControls.minDistance=r.default.controls.minDistance,this.threeControls.maxDistance=r.default.controls.maxDistance,this.threeControls.minPolarAngle=r.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=r.default.controls.maxPolarAngle,this.threeControls.enableDamping=r.default.controls.enableDamping,this.threeControls.enableZoom=r.default.controls.enableZoom,this.threeControls.dampingFactor=r.default.controls.dampingFactor},e}()},"./src/js/app/components/geometry.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),o=n("./src/js/utils/bufferGeometryUtils.ts");const i=function(){function e(e,t){this.scene=e,this.geo=null,this.dimension=t}return e.prototype.makeSphere=function(e,t,n){void 0===t&&(t=32),void 0===n&&(n=32),this.geo=new r.SphereGeometry(e,t,n)},e.prototype.makePlane=function(e,t,n,o){void 0===n&&(n=1),void 0===o&&(o=1),this.geo=new r.PlaneGeometry(e,t,n,o)},e.prototype.makeBox=function(e,t,n,o,i,a){this.geo=new r.BoxGeometry(e,t,n,o,i,a)},e.prototype.makeBall=function(){return this.makeSphere(.25,32,16),this.geo},e.prototype.makeGround=function(){return this.makePlane(10*this.dimension,10*this.dimension,this.dimension,this.dimension),this.geo},e.prototype.makeWalls=function(e){for(var t=new r.Object3D,n=new r.Object3D,i=[],a=0;a<e.length;a++)for(var s=0;s<e.length;s++)if(!0===e[a][s]){var l=new r.BoxGeometry(1,1,1,1,1,1);n.position.x=a,n.position.y=s,n.position.z=0,n.add(t),t.updateWorldMatrix(!0,!1),l.applyMatrix4(t.matrixWorld),i.push(l)}return o.BufferGeometryUtils.mergeBufferGeometries(i)},e}()},"./src/js/app/components/light.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),o=n("./src/js/data/config.js");const i=function(){function e(e){this.scene=e,this.init()}return e.prototype.init=function(){this.pointLight=new r.PointLight(o.default.pointLight.color,o.default.pointLight.intensity,o.default.pointLight.distance,o.default.pointLight.decay),this.pointLight.position.set(o.default.pointLight.x,o.default.pointLight.y,o.default.pointLight.z),this.pointLight.visible=o.default.pointLight.enabled,this.ambientLight=new r.AmbientLight(o.default.ambientLight.color),this.ambientLight.visible=o.default.ambientLight.enabled},e.prototype.place=function(e){switch(e){case"point":this.scene.add(this.pointLight);break;case"ambient":this.scene.add(this.ambientLight)}},e}()},"./src/js/app/components/material.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/three/build/three.module.js");const o=function(){function e(){}return e.prototype.makePhongMaterial=function(e){return new r.MeshPhongMaterial({map:e})},e}()},"./src/js/app/components/physics.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Physics:()=>i});var r=n("./node_modules/cannon-es/dist/cannon-es.js"),o=n("./src/js/data/config.js"),i=function(){function e(){this.force=500,this.dt=1/60,this.fixedTimeStep=1/60,this.maxSubSteps=3}return e.prototype.setupWorld=function(e){this.createZeroGravityWorld(),this.createFrictionSurfaces(),this.createGround(),this.createBall(),this.createWall(e)},e.prototype.createZeroGravityWorld=function(){var e=o.default.physics.world.gravity,t=e.x,n=e.y,i=e.z;this.world=new r.World({gravity:new r.Vec3(t,n,i),broadphase:new r.NaiveBroadphase})},e.prototype.createFrictionSurfaces=function(){this.ballMaterial=new r.Material("ballMaterial"),this.groundMaterial=new r.Material("groundMaterial"),this.wallMaterial=new r.Material("wallMaterial");var e=new r.ContactMaterial(this.groundMaterial,this.groundMaterial,{friction:1,restitution:.3,contactEquationStiffness:1e8,contactEquationRelaxation:3,frictionEquationStiffness:1e8});this.world.addContactMaterial(e);var t=new r.ContactMaterial(this.groundMaterial,this.ballMaterial,{friction:1,restitution:.3,contactEquationStiffness:1e8,contactEquationRelaxation:3});this.world.addContactMaterial(t);var n=new r.ContactMaterial(this.ballMaterial,this.wallMaterial,{friction:.6,restitution:.3,contactEquationStiffness:1e8,contactEquationRelaxation:3});this.world.addContactMaterial(n)},e.prototype.createBall=function(){var e=o.default.physics.ball,t=e.initialPosition,n=e.mass,i=e.radius;this.ball=new r.Body({material:this.ballMaterial,mass:n,collisionFilterGroup:this.GROUP1,collisionFilterMask:this.GROUP2,linearDamping:.75,angularDamping:.75,shape:new r.Sphere(i),type:r.BODY_TYPES.DYNAMIC});var a=t.x,s=void 0===a?0:a,l=t.y,u=void 0===l?0:l,c=t.z,d=void 0===c?0:c;this.ball.position.set(s,u,d),this.world.addBody(this.ball),this.ball.addEventListener("collide",(function(e){console.log("The sphere just collided with the ground!"),console.log("Collided with body:",e.body)}))},e.prototype.createGround=function(){var e=new r.Plane,t=new r.Body({mass:0,material:this.groundMaterial});t.addShape(e),t.position.setZero(),this.world.addBody(t)},e.prototype.createWall=function(e){for(var t=0;t<e.length;t++)for(var n=0;n<e.length;n++)if(!0===e[t][n]){var o=new r.Body({type:r.BODY_TYPES.STATIC,material:this.wallMaterial,shape:new r.Box(new r.Vec3(.5,.5,.5)),collisionFilterGroup:this.GROUP2,collisionFilterMask:this.GROUP1});o.position.x=t,o.position.y=n,o.position.z=0,this.world.addBody(o)}},e.prototype.moveBall=function(e){var t,n=new r.Vec3(0,0,.25);switch(e){case"left":t=new r.Vec3(-1,0,0);break;case"right":t=new r.Vec3(1,0,0);break;case"up":t=new r.Vec3(0,1,0);break;case"down":t=new r.Vec3(0,-1,0)}this.ball.applyImpulse(t,n)},e.prototype.updatePhysics=function(e){this.world.step(this.fixedTimeStep,e,this.maxSubSteps)},e}()},"./src/js/app/components/renderer.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),o=n("./src/js/data/config.js");const i=function(){function e(e,t){var n=this;this.scene=e,this.container=t,this.threeRenderer=new r.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(e.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),t.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=r.PCFSoftShadowMap,o.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return n.updateSize()}),!1),window.addEventListener("resize",(function(){return n.updateSize()}),!1)}return e.prototype.updateSize=function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)},e.prototype.render=function(e,t){this.threeRenderer.render(e,t)},e}()},"./src/js/app/main.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>g});var r,o=n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),i=n("./node_modules/three/build/three.module.js"),a=n("./src/js/data/config.js"),s=n("./src/js/app/components/camera.ts"),l=n("./src/js/app/components/controls.ts"),u=n("./src/js/app/components/geometry.ts"),c=n("./src/js/app/components/light.ts"),d=n("./src/js/app/components/material.ts"),h=n("./src/js/app/components/physics.ts"),m=n("./src/js/app/components/renderer.ts"),p=n("./src/js/app/managers/interaction.ts"),f=n("./src/js/app/model/texture.ts");const g=function(){function e(e){var t=this;this.path=[],this.container=e,this.clock=new i.Clock,this.mazeDimension=11,this.scene=new i.Scene,this.scene.fog=new i.FogExp2(a.default.fog.color,a.default.fog.near),this.material=new d.default,this.geometry=new u.default(this.scene,this.mazeDimension),window.devicePixelRatio&&(a.default.dpr=window.devicePixelRatio),this.renderer=new m.default(this.scene,e),this.camera=new s.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,e),this.lights=new c.default(this.scene),this.texture=new f.default,this.physics=new h.Physics,this.maze=this.generateSquareMaze(this.mazeDimension),this.maze[this.mazeDimension-1][this.mazeDimension-2]=!1,this.setupPhysics(),this.texture.load().then((function(){t.setupRenderWorld(),console.log("ballmesh",t.ballMesh),t.gameState="fade in",new p.default(t.renderer.threeRenderer,t.scene,t.camera.threeCamera,t.controls.threeControls,t.moveBall.bind(t))})),this.gameState="initialize",this.render(Date.now())}return e.prototype.moveBall=function(e){this.physics.moveBall(e)},e.prototype.setupRenderWorld=function(){this.scene.add(this.camera.threeCamera),this.lights.place("ambient"),this.lights.place("point");var e=this.geometry.makeBall(),t=this.geometry.makeGround(),n=this.geometry.makeWalls(this.maze),r=this.texture.textures,o=r.grass,a=r.ball,s=r.wall,l=this.material.makePhongMaterial(a);this.ballMesh=new i.Mesh(e,l),console.log("Here!!"),this.ballMesh.position.set(1,1,.25),this.scene.add(this.ballMesh);var u=this.material.makePhongMaterial(s),c=new i.Mesh(n,u);c.position.z=.5,this.scene.add(c),o.wrapS=i.RepeatWrapping,o.wrapT=i.RepeatWrapping,o.repeat.set(5*this.mazeDimension,5*this.mazeDimension);var d=this.material.makePhongMaterial(o),h=new i.Mesh(t,d);h.position.set((this.mazeDimension-1)/2,(this.mazeDimension-1)/2,0),h.rotation.set(0,0,0),this.scene.add(h)},e.prototype.updateRenderWorld=function(){this.ballMesh.position.copy(this.physics.ball.position),this.ballMesh.quaternion.copy(this.physics.ball.quaternion),this.lights.pointLight.position.copy(new i.Vector3(this.physics.ball.position.x,this.physics.ball.position.y,a.default.pointLight.z)),this.camera.threeCamera.position.x+=.1*(this.ballMesh.position.x-this.camera.threeCamera.position.x),this.camera.threeCamera.position.y+=.1*(this.ballMesh.position.y-this.camera.threeCamera.position.y)},e.prototype.setupPhysics=function(){this.physics.setupWorld(this.maze)},e.prototype.generateSquareMaze=function(e){for(var t=new Array(e),n=0;n<e;n++){t[n]=new Array(e);for(var o=0;o<e;o++)t[n][o]=!0}return t=function t(n,o,i){for(n[o][i]=!1;;){if(r=[],o>1&&1==n[o-2][i]&&r.push([-1,0]),o<e-2&&1==n[o+2][i]&&r.push([1,0]),i>1&&1==n[o][i-2]&&r.push([0,-1]),i<e-2&&1==n[o][i+2]&&r.push([0,1]),0==r.length)return n;var a=r[Math.floor(Math.random()*r.length)];n[o+a[0]][i+a[1]]=!1,n=t(n,o+2*a[0],i+2*a[1])}}(t,1,1)},e.prototype.render=function(e){switch(o.default.update(),this.gameState){case"initialize":console.log("initialzing"),this.lights.pointLight.intensity=0;break;case"fade in":console.log("fade in");var t=this.lights.pointLight.intensity;this.lights.pointLight.intensity+=.1*(1-t),this.renderer.render(this.scene,this.camera.threeCamera),Math.abs(t-1)<.05&&(this.lights.pointLight.intensity=1,this.gameState="play");break;case"play":this.physics.updatePhysics(e),this.updateRenderWorld();var n=Math.floor(this.ballMesh.position.x+.5),r=Math.floor(this.ballMesh.position.y+.5);if(0===this.path.length)this.path.push([n,r]);else if(this.path[this.path.length-1]){var i=this.path[this.path.length-1],a=i[0],s=i[1];a===n&&s===r||this.path.push([n,r])}n==this.mazeDimension&&r==this.mazeDimension-2&&(document.getElementById("maze_solution").value=JSON.stringify(this.path),this.gameState="fade out",setTimeout((function(){document.forms[0].submit()}),300)),this.renderer.render(this.scene,this.camera.threeCamera);break;case"fade out":this.lights.pointLight.intensity+=.1*(0-this.lights.pointLight.intensity),this.renderer.render(this.scene,this.camera.threeCamera),Math.abs(this.lights.pointLight.intensity-0)<.1&&(this.lights.pointLight.intensity=0,this.renderer.render(this.scene,this.camera.threeCamera))}requestAnimationFrame(this.render.bind(this))},e}()},"./src/js/app/managers/interaction.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./src/js/data/config.js"),o=n("./src/js/utils/helpers.ts"),i=n("./src/js/utils/keyboard.ts");const a=function(){function e(e,t,n,r,a){var s=this;this.requestInterval=function(e,t){var n=window.requestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},r=(new Date).getTime(),o={};return o.value=n((function i(){o.value=n(i),(new Date).getTime()-r>=t&&(e.call(),r=(new Date).getTime())})),o},this.pressAndHold=function(e,t){var n,r=function(e){e.preventDefault(),n=s.requestInterval(t,1e3/60)};function o(e){e.preventDefault(),cancelAnimationFrame(n.value)}e.addEventListener("mousedown",r),e.addEventListener("mouseup",o),e.addEventListener("touchstart",r),e.addEventListener("touchend",o)},this.renderer=e,this.scene=t,this.camera=n,this.controls=r,this.timeout=null,this.keyboard=new i.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return o.default.throttle((function(){return s.onMouseMove(e)}),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||(s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed"),s.keyboard.eventMatches(e,"left")&&a("left"),s.keyboard.eventMatches(e,"right")&&a("right"),s.keyboard.eventMatches(e,"down")&&a("down"),s.keyboard.eventMatches(e,"up")&&a("up"))})),this.upKey=document.querySelector("#upkey"),this.leftKey=document.querySelector("#leftkey"),this.downKey=document.querySelector("#downkey"),this.rightKey=document.querySelector("#rightkey"),this.pressAndHold(this.upKey,o.default.throttle((function(){return a("up")}),60)),this.pressAndHold(this.leftKey,o.default.throttle((function(){return a("left")}),60)),this.pressAndHold(this.rightKey,o.default.throttle((function(){return a("right")}),60)),this.pressAndHold(this.downKey,o.default.throttle((function(){return a("down")}),60))}return e.prototype.onMouseOver=function(e){e.preventDefault(),r.default.isMouseOver=!0},e.prototype.onMouseLeave=function(e){e.preventDefault(),r.default.isMouseOver=!1},e.prototype.onMouseMove=function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){r.default.isMouseMoving=!1}),200),r.default.isMouseMoving=!0},e}()},"./src/js/app/model/texture.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/three/build/three.module.js"),o=n("./node_modules/es6-promise/dist/es6-promise.js"),i=n("./src/js/utils/helpers.ts"),a=n("./src/js/data/config.js");const s=function(){function e(){this.textures={}}return e.prototype.load=function(){var e=this,t=new r.TextureLoader,n=a.default.maxAnisotropy,s=a.default.texture.imageFiles,l=[];return t.setPath(a.default.texture.path),s.forEach((function(e){l.push(new o.Promise((function(o,a){t.load(e.image,(function(t){t.anisotropy=n;var i={};i[e.name]=t,i[e.name]instanceof r.Texture&&o(i)}),i.default.logProgress(),(function(t){return a(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),o.Promise.all(l).then((function(t){for(var n=0;n<t.length;n++)e.textures[Object.keys(t[n])[0]]=t[n][Object.keys(t[n])[0]];console.log("Textures loaded")}),(function(e){return console.log(e)}))},e}()},"./src/js/utils/bufferGeometryUtils.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BufferGeometryUtils:()=>o});var r=n("./node_modules/THREE/build/three.module.js"),o=function(){function e(){}return e.computeTangents=function(e){e.computeTangents(),console.warn("THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.")},e.mergeBufferGeometries=function(e,t){void 0===t&&(t=!1);for(var n=null!==e[0].index,o=new Set(Object.keys(e[0].attributes)),i=new Set(Object.keys(e[0].morphAttributes)),a={},s={},l=e[0].morphTargetsRelative,u=new r.BufferGeometry,c=0,d=0;d<e.length;++d){var h=e[d],m=0;if(n!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var p in h.attributes){if(!o.has(p))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+p+'" attribute exists among all geometries, or in none of them.'),null;void 0===a[p]&&(a[p]=[]),a[p].push(h.attributes[p]),m++}if(m!==o.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var f in h.morphAttributes){if(!i.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[f]&&(s[f]=[]),s[f].push(h.morphAttributes[f])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(h.userData),t){var g=void 0;if(n)g=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;g=h.attributes.position.count}u.addGroup(c,g,d),c+=g}}if(n){var b=0,y=[];for(d=0;d<e.length;++d){for(var v=e[d].index,w=0;w<v.count;++w)y.push(v.getX(w)+b);b+=e[d].attributes.position.count}u.setIndex(y)}for(var E in a){var M=this.mergeBufferAttributes(a[E]);if(!M)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+E+" attribute."),null;u.setAttribute(E,M)}for(var A in s){var T=s[A][0].length;if(0===T)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[A]=[];for(d=0;d<T;++d){var x=[];for(w=0;w<s[A].length;++w)x.push(s[A][w][d]);var j=this.mergeBufferAttributes(x);if(!j)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+A+" morphAttribute."),null;u.morphAttributes[A].push(j)}}return u},e.mergeBufferAttributes=function(e){for(var t,n,o,i=0,a=0;a<e.length;++a){var s=e[a];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===n&&(n=s.itemSize),n!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===o&&(o=s.normalized),o!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;i+=s.array.length}var l=new t(i),u=0;for(a=0;a<e.length;++a)l.set(e[a].array,u),u+=e[a].array.length;return new r.BufferAttribute(l,n,o)},e.interleaveAttributes=function(e){for(var t,n=0,o=0,i=0,a=e.length;i<a;++i){var s=e[i];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;n+=s.array.length,o+=s.itemSize}var l=new r.InterleavedBuffer(new t(n),o),u=0,c=[],d=["getX","getY","getZ","getW"],h=["setX","setY","setZ","setW"],m=0;for(a=e.length;m<a;m++){var p=(s=e[m]).itemSize,f=s.count,g=new r.InterleavedBufferAttribute(l,p,u,s.normalized);c.push(g),u+=p;for(var b=0;b<f;b++)for(var y=0;y<p;y++)g[h[y]](b,s[d[y]](b))}return c},e.estimateBytesUsed=function(e){var t=0;for(var n in e.attributes){var r=e.getAttribute(n);t+=r.count*r.itemSize*r.array.BYTES_PER_ELEMENT}var o=e.getIndex();return t+=o?o.count*o.itemSize*o.array.BYTES_PER_ELEMENT:0},e.mergeVertices=function(e,t){void 0===t&&(t=1e-4),t=Math.max(t,Number.EPSILON);for(var n={},o=e.getIndex(),i=e.getAttribute("position"),a=o?o.count:i.count,s=0,l=Object.keys(e.attributes),u={},c={},d=[],h=["getX","getY","getZ","getW"],m=0,p=l.length;m<p;m++){var f=l[m];u[f]=[],(j=e.morphAttributes[f])&&(c[f]=new Array(j.length).fill().map((function(){return[]})))}var g=Math.log10(1/t),b=Math.pow(10,g);for(m=0;m<a;m++){var y=o?o.getX(m):m,v="",w=0;for(p=l.length;w<p;w++)for(var E=l[w],M=(x=e.getAttribute(E)).itemSize,A=0;A<M;A++)v+=~~(x[h[A]](y)*b)+",";if(v in n)d.push(n[v]);else{for(w=0,p=l.length;w<p;w++){var T=l[w],x=e.getAttribute(T),j=e.morphAttributes[T],L=(M=x.itemSize,u[T]),O=c[T];for(A=0;A<M;A++){var S=h[A];if(L.push(x[S](y)),j)for(var k=0,C=j.length;k<C;k++)O[k].push(j[k][S](y))}}n[v]=s,d.push(s),s++}}var P=e.clone();for(m=0,p=l.length;m<p;m++){var R=l[m],B=e.getAttribute(R),D=new B.array.constructor(u[R]);x=new r.BufferAttribute(D,B.itemSize,B.normalized);if(P.setAttribute(R,x),R in c)for(w=0;w<c[R].length;w++){var z=e.morphAttributes[R][w],G=new z.array.constructor(c[R][w]),U=new r.BufferAttribute(G,z.itemSize,z.normalized);P.morphAttributes[R][w]=U}}return P.setIndex(d),P},e.toTrianglesDrawMode=function(e,t){if(t===r.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===r.TriangleFanDrawMode||t===r.TriangleStripDrawMode){var n=e.getIndex();if(null===n){var o=[],i=e.getAttribute("position");if(void 0===i)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var a=0;a<i.count;a++)o.push(a);e.setIndex(o),n=e.getIndex()}var s=n.count-2,l=[];if(t===r.TriangleFanDrawMode)for(a=1;a<=s;a++)l.push(n.getX(0)),l.push(n.getX(a)),l.push(n.getX(a+1));else for(a=0;a<s;a++)a%2==0?(l.push(n.getX(a)),l.push(n.getX(a+1)),l.push(n.getX(a+2))):(l.push(n.getX(a+2)),l.push(n.getX(a+1)),l.push(n.getX(a)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e},e.computeMorphedAttributes=function(e){if(!0!==e.geometry.isBufferGeometry)return console.error("THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry."),null;var t=new r.Vector3,n=new r.Vector3,o=new r.Vector3,i=new r.Vector3,a=new r.Vector3,s=new r.Vector3,l=new r.Vector3,u=new r.Vector3,c=new r.Vector3;function d(e,r,d,h,m,p,f,g,b){t.fromBufferAttribute(d,p),n.fromBufferAttribute(d,f),o.fromBufferAttribute(d,g);var y=e.morphTargetInfluences;if(r.morphTargets&&h&&y){l.set(0,0,0),u.set(0,0,0),c.set(0,0,0);for(var v=0,w=h.length;v<w;v++){var E=y[v],M=h[v];0!==E&&(i.fromBufferAttribute(M,p),a.fromBufferAttribute(M,f),s.fromBufferAttribute(M,g),m?(l.addScaledVector(i,E),u.addScaledVector(a,E),c.addScaledVector(s,E)):(l.addScaledVector(i.sub(t),E),u.addScaledVector(a.sub(n),E),c.addScaledVector(s.sub(o),E)))}t.add(l),n.add(u),o.add(c)}e.isSkinnedMesh&&(e.boneTransform(p,t),e.boneTransform(f,n),e.boneTransform(g,o)),b[3*p+0]=t.x,b[3*p+1]=t.y,b[3*p+2]=t.z,b[3*f+0]=n.x,b[3*f+1]=n.y,b[3*f+2]=n.z,b[3*g+0]=o.x,b[3*g+1]=o.y,b[3*g+2]=o.z}var h,m,p,f,g,b,y,v,w,E=e.geometry,M=e.material,A=E.index,T=E.attributes.position,x=E.morphAttributes.position,j=E.morphTargetsRelative,L=E.attributes.normal,O=E.morphAttributes.position,S=E.groups,k=E.drawRange,C=new Float32Array(T.count*T.itemSize),P=new Float32Array(L.count*L.itemSize);if(null!==A)if(Array.isArray(M))for(f=0,b=S.length;f<b;f++)for(w=M[(v=S[f]).materialIndex],g=Math.max(v.start,k.start),y=Math.min(v.start+v.count,k.start+k.count);g<y;g+=3)d(e,w,T,x,j,h=A.getX(g),m=A.getX(g+1),p=A.getX(g+2),C),d(e,w,L,O,j,h,m,p,P);else for(f=Math.max(0,k.start),b=Math.min(A.count,k.start+k.count);f<b;f+=3)d(e,M,T,x,j,h=A.getX(f),m=A.getX(f+1),p=A.getX(f+2),C),d(e,M,L,O,j,h,m,p,P);else if(void 0!==T)if(Array.isArray(M))for(f=0,b=S.length;f<b;f++)for(w=M[(v=S[f]).materialIndex],g=Math.max(v.start,k.start),y=Math.min(v.start+v.count,k.start+k.count);g<y;g+=3)d(e,w,T,x,j,h=g,m=g+1,p=g+2,C),d(e,w,L,O,j,h,m,p,P);else for(f=Math.max(0,k.start),b=Math.min(T.count,k.start+k.count);f<b;f+=3)d(e,M,T,x,j,h=f,m=f+1,p=f+2,C),d(e,M,L,O,j,h,m,p,P);return{positionAttribute:T,normalAttribute:L,morphedPositionAttribute:new r.Float32BufferAttribute(C,3),morphedNormalAttribute:new r.Float32BufferAttribute(P,3)}},e}()},"./src/js/utils/detector.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,n,r;t=void 0!==(null==e?void 0:e.parentElement)?e.parentElement:document.body,n=void 0!==(null==e?void 0:e.id)?e.id:"oldie",(r=this.getWebGLErrorMessage()).id=n,t.appendChild(r)}}},"./src/js/utils/helpers.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/three/build/three.module.js");const o=function(){function e(){}return e.throttle=function(e,t,n){var r,o;return t||(t=250),function(){var i=n||this,a=+new Date,s=arguments;r&&a<r+t?(clearTimeout(o),o=setTimeout((function(){r=a,e.apply(i,s)}),t)):(r=a,e.apply(i,s))}},e.logProgress=function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t)+"% downloaded")}}},e.logError=function(){return function(e){console.error(e)}},e.handleColorChange=function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(parseInt(t,12))}},e.update=function(e){this.needsUpdate(e.material,e.geometry)},e.needsUpdate=function(e,t){return function(){e instanceof r.Material&&(e.side=+e.side,e.needsUpdate=!0),t.attributes.position.needsUpdate=!0,t.attributes.normals.needsUpdate=!0,t.attributes.colors.needsUpdate=!0}},e.updateTexture=function(e,t,n){return function(r){e[t]=n[r],e.needsUpdate=!0}},e}()},"./src/js/utils/keyboard.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ALIAS:()=>r,default:()=>o});var r={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27};const o=function(){function e(e){var t=this;this.domElement=e||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return t.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return t.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return t.onBlur}),!1)}return e.prototype.destroy=function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)},e.prototype.onBlur=function(){for(var e in this.keyCodes)this.keyCodes[e]=!1},e.prototype.onKeyChange=function(e){console;var t=e.keyCode;this.keyCodes[t]="keydown"===e.type},e.prototype.pressed=function(e){for(var t=e.split("+"),n=0;n<t.length;n++){var o=t[n];if(!(-1!=Object.keys(r).indexOf(o)?this.keyCodes[r[o]]:this.keyCodes[o.toUpperCase().charCodeAt(0)]))return!1}return!0},e.prototype.eventMatches=function(e,t){for(var n=r,o=Object.keys(n),i=-1!=t.indexOf("+")?t.split("+"):[t],a=0;a<i.length;a++){var s=i[a],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==o.indexOf(s)?l=e.keyCode===n[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0},e}()},"./src/js/utils/orbitControls.ts":(e,t,n)=>{"use strict";n.r(t);var r,o,i,a,s,l,u=n("./node_modules/three/build/three.module.js"),c=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});o={type:"change"},i={type:"start"},a={type:"end"},s=function(e){function t(t,n){var r,s,l,c,d,h,m=e.call(this)||this;void 0===n&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),n===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),m.object=t,m.domElement=n,m.enabled=!0,m.target=new u.Vector3,m.minDistance=0,m.maxDistance=1/0,m.minZoom=0,m.maxZoom=1/0,m.minPolarAngle=0,m.maxPolarAngle=Math.PI,m.minAzimuthAngle=-1/0,m.maxAzimuthAngle=1/0,m.enableDamping=!1,m.dampingFactor=.05,m.enableZoom=!0,m.zoomSpeed=1,m.enableRotate=!0,m.rotateSpeed=1,m.enablePan=!0,m.panSpeed=1,m.screenSpacePanning=!0,m.keyPanSpeed=7,m.autoRotate=!1,m.autoRotateSpeed=2,m.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},m.mouseButtons={LEFT:u.MOUSE.ROTATE,MIDDLE:u.MOUSE.DOLLY,RIGHT:u.MOUSE.PAN},m.touches={ONE:u.TOUCH.ROTATE,TWO:u.TOUCH.DOLLY_PAN},m.target0=m.target.clone(),m.position0=m.object.position.clone(),m.zoom0=m.object.zoom,m._domElementKeyEvents=null,m.getPolarAngle=function(){return y.phi},m.getAzimuthalAngle=function(){return y.theta},m.listenToKeyEvents=function(e){e.addEventListener("keydown",$),this._domElementKeyEvents=e},m.saveState=function(){p.target0.copy(p.target),p.position0.copy(p.object.position),p.zoom0=p.object.zoom},m.reset=function(){p.target.copy(p.target0),p.object.position.copy(p.position0),p.object.zoom=p.zoom0,p.object.updateProjectionMatrix(),p.dispatchEvent(o),p.update(),g=f.NONE},m.update=(r=new u.Vector3,s=(new u.Quaternion).setFromUnitVectors(t.up,new u.Vector3(0,1,0)),l=s.clone().invert(),c=new u.Vector3,d=new u.Quaternion,h=2*Math.PI,function(){var e=p.object.position;r.copy(e).sub(p.target),r.applyQuaternion(s),y.setFromVector3(r),p.autoRotate&&g===f.NONE&&R(2*Math.PI/60/60*p.autoRotateSpeed),p.enableDamping?(y.theta+=v.theta*p.dampingFactor,y.phi+=v.phi*p.dampingFactor):(y.theta+=v.theta,y.phi+=v.phi);var t=p.minAzimuthAngle,n=p.maxAzimuthAngle;return isFinite(t)&&isFinite(n)&&(t<-Math.PI?t+=h:t>Math.PI&&(t-=h),n<-Math.PI?n+=h:n>Math.PI&&(n-=h),y.theta=t<=n?Math.max(t,Math.min(n,y.theta)):y.theta>(t+n)/2?Math.max(t,y.theta):Math.min(n,y.theta)),y.phi=Math.max(p.minPolarAngle,Math.min(p.maxPolarAngle,y.phi)),y.makeSafe(),y.radius*=w,y.radius=Math.max(p.minDistance,Math.min(p.maxDistance,y.radius)),!0===p.enableDamping?p.target.addScaledVector(E,p.dampingFactor):p.target.add(E),r.setFromSpherical(y),r.applyQuaternion(l),e.copy(p.target).add(r),p.object.lookAt(p.target),!0===p.enableDamping?(v.theta*=1-p.dampingFactor,v.phi*=1-p.dampingFactor,E.multiplyScalar(1-p.dampingFactor)):(v.set(0,0,0),E.set(0,0,0)),w=1,!!(M||c.distanceToSquared(p.object.position)>b||8*(1-d.dot(p.object.quaternion))>b)&&(p.dispatchEvent(o),c.copy(p.object.position),d.copy(p.object.quaternion),M=!1,!0)}),m.dispose=function(){p.domElement.removeEventListener("contextmenu",re),p.domElement.removeEventListener("pointerdown",K),p.domElement.removeEventListener("wheel",J),p.domElement.removeEventListener("touchstart",ee),p.domElement.removeEventListener("touchend",ne),p.domElement.removeEventListener("touchmove",te),p.domElement.ownerDocument.removeEventListener("pointermove",q),p.domElement.ownerDocument.removeEventListener("pointerup",Q),null!==p._domElementKeyEvents&&p._domElementKeyEvents.removeEventListener("keydown",$)};var p=m,f={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},g=f.NONE,b=1e-6,y=new u.Spherical,v=new u.Spherical,w=1,E=new u.Vector3,M=!1,A=new u.Vector2,T=new u.Vector2,x=new u.Vector2,j=new u.Vector2,L=new u.Vector2,O=new u.Vector2,S=new u.Vector2,k=new u.Vector2,C=new u.Vector2;function P(){return Math.pow(.95,p.zoomSpeed)}function R(e){v.theta-=e}function B(e){v.phi-=e}var D,z=(D=new u.Vector3,function(e,t){D.setFromMatrixColumn(t,0),D.multiplyScalar(-e),E.add(D)}),G=function(){var e=new u.Vector3;return function(t,n){!0===p.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(p.object.up,e)),e.multiplyScalar(t),E.add(e)}}(),U=function(){var e=new u.Vector3;return function(t,n){var r=p.domElement;if(p.object.isPerspectiveCamera){var o=p.object.position;e.copy(o).sub(p.target);var i=e.length();i*=Math.tan(p.object.fov/2*Math.PI/180),z(2*t*i/r.clientHeight,p.object.matrix),G(2*n*i/r.clientHeight,p.object.matrix)}else p.object.isOrthographicCamera?(z(t*(p.object.right-p.object.left)/p.object.zoom/r.clientWidth,p.object.matrix),G(n*(p.object.top-p.object.bottom)/p.object.zoom/r.clientHeight,p.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),p.enablePan=!1)}}();function _(e){p.object.isPerspectiveCamera?w/=e:p.object.isOrthographicCamera?(p.object.zoom=Math.max(p.minZoom,Math.min(p.maxZoom,p.object.zoom*e)),p.object.updateProjectionMatrix(),M=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),p.enableZoom=!1)}function H(e){p.object.isPerspectiveCamera?w*=e:p.object.isOrthographicCamera?(p.object.zoom=Math.max(p.minZoom,Math.min(p.maxZoom,p.object.zoom/e)),p.object.updateProjectionMatrix(),M=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),p.enableZoom=!1)}function N(e){A.set(e.clientX,e.clientY)}function Y(e){j.set(e.clientX,e.clientY)}function I(e){if(1==e.touches.length)A.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);A.set(t,n)}}function V(e){if(1==e.touches.length)j.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);j.set(t,n)}}function F(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+n*n);S.set(0,r)}function X(e){if(1==e.touches.length)T.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);T.set(t,n)}x.subVectors(T,A).multiplyScalar(p.rotateSpeed);var r=p.domElement;R(2*Math.PI*x.x/r.clientHeight),B(2*Math.PI*x.y/r.clientHeight),A.copy(T)}function W(e){if(1==e.touches.length)L.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);L.set(t,n)}O.subVectors(L,j).multiplyScalar(p.panSpeed),U(O.x,O.y),j.copy(L)}function Z(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+n*n);k.set(0,r),C.set(0,Math.pow(k.y/S.y,p.zoomSpeed)),_(C.y),S.copy(k)}function K(e){if(!1!==p.enabled)switch(e.pointerType){case"mouse":case"pen":!function(e){var t;switch(e.preventDefault(),p.domElement.focus?p.domElement.focus():window.focus(),e.button){case 0:t=p.mouseButtons.LEFT;break;case 1:t=p.mouseButtons.MIDDLE;break;case 2:t=p.mouseButtons.RIGHT;break;default:t=-1}switch(t){case u.MOUSE.DOLLY:if(!1===p.enableZoom)return;!function(e){S.set(e.clientX,e.clientY)}(e),g=f.DOLLY;break;case u.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===p.enablePan)return;Y(e),g=f.PAN}else{if(!1===p.enableRotate)return;N(e),g=f.ROTATE}break;case u.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===p.enableRotate)return;N(e),g=f.ROTATE}else{if(!1===p.enablePan)return;Y(e),g=f.PAN}break;default:g=f.NONE}g!==f.NONE&&(p.domElement.ownerDocument.addEventListener("pointermove",q),p.domElement.ownerDocument.addEventListener("pointerup",Q),p.dispatchEvent(i))}(e)}}function q(e){if(!1!==p.enabled)switch(e.pointerType){case"mouse":case"pen":!function(e){if(!1!==p.enabled)switch(e.preventDefault(),g){case f.ROTATE:if(!1===p.enableRotate)return;!function(e){T.set(e.clientX,e.clientY),x.subVectors(T,A).multiplyScalar(p.rotateSpeed);var t=p.domElement;R(2*Math.PI*x.x/t.clientHeight),B(2*Math.PI*x.y/t.clientHeight),A.copy(T),p.update()}(e);break;case f.DOLLY:if(!1===p.enableZoom)return;!function(e){k.set(e.clientX,e.clientY),C.subVectors(k,S),C.y>0?_(P()):C.y<0&&H(P()),S.copy(k),p.update()}(e);break;case f.PAN:if(!1===p.enablePan)return;!function(e){L.set(e.clientX,e.clientY),O.subVectors(L,j).multiplyScalar(p.panSpeed),U(O.x,O.y),j.copy(L),p.update()}(e)}}(e)}}function Q(e){switch(e.pointerType){case"mouse":case"pen":p.domElement.ownerDocument.removeEventListener("pointermove",q),p.domElement.ownerDocument.removeEventListener("pointerup",Q),!1!==p.enabled&&(p.dispatchEvent(a),g=f.NONE)}}function J(e){!1===p.enabled||!1===p.enableZoom||g!==f.NONE&&g!==f.ROTATE||(e.preventDefault(),p.dispatchEvent(i),function(e){e.deltaY<0?H(P()):e.deltaY>0&&_(P()),p.update()}(e),p.dispatchEvent(a))}function $(e){!1!==p.enabled&&!1!==p.enablePan&&function(e){var t=!1;switch(e.code){case p.keys.UP:U(0,p.keyPanSpeed),t=!0;break;case p.keys.BOTTOM:U(0,-p.keyPanSpeed),t=!0;break;case p.keys.LEFT:U(p.keyPanSpeed,0),t=!0;break;case p.keys.RIGHT:U(-p.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),p.update())}(e)}function ee(e){if(!1!==p.enabled){switch(e.preventDefault(),e.touches.length){case 1:switch(p.touches.ONE){case u.TOUCH.ROTATE:if(!1===p.enableRotate)return;I(e),g=f.TOUCH_ROTATE;break;case u.TOUCH.PAN:if(!1===p.enablePan)return;V(e),g=f.TOUCH_PAN;break;default:g=f.NONE}break;case 2:switch(p.touches.TWO){case u.TOUCH.DOLLY_PAN:if(!1===p.enableZoom&&!1===p.enablePan)return;!function(e){p.enableZoom&&F(e),p.enablePan&&V(e)}(e),g=f.TOUCH_DOLLY_PAN;break;case u.TOUCH.DOLLY_ROTATE:if(!1===p.enableZoom&&!1===p.enableRotate)return;!function(e){p.enableZoom&&F(e),p.enableRotate&&I(e)}(e),g=f.TOUCH_DOLLY_ROTATE;break;default:g=f.NONE}break;default:g=f.NONE}g!==f.NONE&&p.dispatchEvent(i)}}function te(e){if(!1!==p.enabled)switch(e.preventDefault(),g){case f.TOUCH_ROTATE:if(!1===p.enableRotate)return;X(e),p.update();break;case f.TOUCH_PAN:if(!1===p.enablePan)return;W(e),p.update();break;case f.TOUCH_DOLLY_PAN:if(!1===p.enableZoom&&!1===p.enablePan)return;!function(e){p.enableZoom&&Z(e),p.enablePan&&W(e)}(e),p.update();break;case f.TOUCH_DOLLY_ROTATE:if(!1===p.enableZoom&&!1===p.enableRotate)return;!function(e){p.enableZoom&&Z(e),p.enableRotate&&X(e)}(e),p.update();break;default:g=f.NONE}}function ne(e){!1!==p.enabled&&(p.dispatchEvent(a),g=f.NONE)}function re(e){!1!==p.enabled&&e.preventDefault()}return p.domElement.addEventListener("contextmenu",re),p.domElement.addEventListener("pointerdown",K),p.domElement.addEventListener("wheel",J,{passive:!1}),p.domElement.addEventListener("touchstart",ee,{passive:!1}),p.domElement.addEventListener("touchend",ne),p.domElement.addEventListener("touchmove",te,{passive:!1}),m.update(),m}return c(t,e),t}(u.EventDispatcher),l=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.screenSpacePanning=!1,r.mouseButtons.LEFT=u.MOUSE.PAN,r.mouseButtons.RIGHT=u.MOUSE.ROTATE,r.touches.ONE=u.TOUCH.PAN,r.touches.TWO=u.TOUCH.DOLLY_ROTATE,r}return c(t,e),t}(s),u.MapControls=l,u.OrbitControls=s}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.ts",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,